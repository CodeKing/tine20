<?php
/**
 * Tine 2.0 - http://www.tine20.org
 * 
 * @package     Addressbook
 * @license     http://www.gnu.org/licenses/agpl.html
 * @copyright   Copyright (c) 2010-2014 Metaways Infosystems GmbH (http://www.metaways.de)
 * @author      Philipp SchÃ¼le <p.schuele@metaways.de>
 */

/**
 * Test class for Addressbook_Frontend_Cli
 */
class Addressbook_CliTest extends TestCase
{
    /**
     * Backend
     *
     * @var Addressbook_Frontend_Cli
     */
    protected $_cli;
    
    /**
     * @var Tinebase_Model_Container
     */
    protected $_container = null;
    
    /**
     * Sets up the fixture.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        parent::setUp();
        
        $this->_cli = new Addressbook_Frontend_Cli();
        $this->_container = $this->_getTestContainer('Addressbook');
    }
    
    /**
     * test to set container grants
     */
    public function testSetContainerGrants()
    {
        $out = $this->_cliHelper(array(
            'containerId=' . $this->_container->getId(), 
            'accountId=' . Tinebase_Core::getUser()->getId(), 
            'grants=privateGrant'
        ));
        
        $grants = Tinebase_Container::getInstance()->getGrantsOfContainer($this->_container);
        $this->assertTrue(($grants->getFirstRecord()->privateGrant == 1));
    }

    /**
     * test to set container grants with filter and overwrite old grants
     */
    public function testSetContainerGrantsWithFilterAndOverwrite()
    {
        $nameFilter = $this->_container->name;
        $filter = new Tinebase_Model_ContainerFilter(array(
            array('field' => 'application_id', 'operator' => 'equals', 
                'value' => Tinebase_Application::getInstance()->getApplicationByName('Addressbook')->getId()),
            array('field' => 'name', 'operator' => 'contains', 'value' => $nameFilter),
        ));
        $count = Tinebase_Container::getInstance()->searchCount($filter);
        
        $out = $this->_cliHelper(array(
            'namefilter="' . $nameFilter . '"', 
            'accountId=' . Tinebase_Core::getUser()->getId(), 
            'grants=privateGrant,adminGrant',
            'overwrite=1'
        ), $count);
        
        $grants = Tinebase_Container::getInstance()->getGrantsOfContainer($this->_container);
        $this->assertTrue(($grants->getFirstRecord()->privateGrant == 1));
        $this->assertTrue(($grants->getFirstRecord()->adminGrant == 1));
    }
    
    /**
     * call setContainerGrants cli function with params
     * 
     * @param array $_params
     * @return string
     */
    protected function _cliHelper($_params, $_numberExpected = 1)
    {
        $opts = new Zend_Console_Getopt('abp:');
        $opts->setArguments($_params);
        
        ob_start();
        $this->_cli->setContainerGrants($opts);
        $out = ob_get_clean();
        
        $this->assertContains("Updated $_numberExpected container(s)", $out, 'Text not found in: ' . $out);
        
        return $out;
    }
    
    /**
     * testRemoveAutogeneratedContacts
     * 
     * @see 0010257: add cli function for deleting autogenerated contacts
     */
    public function testRemoveAutogeneratedContacts()
    {
        if (! Tinebase_Application::getInstance()->isInstalled('Calendar')) {
            $this->markTestSkipped('only works with Calendar app');
        }
        
        $attenderEmail = 'test@external.org';
        $attenderData = array(
            'email' => $attenderEmail
        );
        Calendar_Model_Attender::resolveEmailToContact($attenderData);
        
        $opts = new Zend_Console_Getopt('abp:');
        $opts->setArguments(array());
        $this->_cli->removeAutogeneratedContacts($opts);
        
        $filter = new Addressbook_Model_ContactFilter(array(
            array('field' => 'email', 'operator' => 'equals', 'value' => $attenderEmail)
        ));
        $result = Addressbook_Controller_Contact::getInstance()->search($filter);
        $this->assertEquals(0, count($result), 'should not find autogenerated contact any more: ' . print_r($result->toArray(), true));
    }
}
